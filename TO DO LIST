#include<iostream>
#include<vector>
#include<string>
using namespace std;
struct Task{
    string description;
    bool completed;
};
vector<Task>tasks;
void addTask(const string& description)
{
    Task newTask={description,false};
    tasks.push_back(newTask);
    cout<<"Task "<<description<<" added"<<endl;
}
void viewTask()
{
    if(tasks.empty())
    {
        cout<<"No Tasks Available"<<endl;
        return;
    }
    for(int i=0;i<tasks.size();++i)
    {
        cout<<i+1<<"."<<tasks[i].description<<"-"<<(tasks[i].completed? "Completed":"Pending")<<endl;
    }
}
void markTaskCompleted(int taskNumber)
{
    if(taskNumber>0 && taskNumber<=tasks.size())
    {
        tasks[taskNumber-1].completed=true;
    }
    else
    {
        cout<<"Invalid Task Number"<<endl;
    }
}
void removeTask(int taskNumber)
{
    if(taskNumber>0 && taskNumber<=tasks.size())
    {
        Task task=tasks[taskNumber-1];
        tasks.erase(tasks.begin()+taskNumber-1);
        cout<<"Task "<<task.description<<" removed"<<endl;
    }
    else
    {
        cout<<"Invalid Task Number"<<endl;
    }
}
int main()
{
    while(true)
    {
        cout<<"Options"<<endl;
        cout<<"1.Add Task"<<endl;
        cout<<"2.View Task"<<endl;
        cout<<"3.Mark Task as Completed"<<endl;
        cout<<"4.Remove Task"<<endl;
        cout<<"5.Exit"<<endl;
        cout<<"Choose an option:"<<endl;
        int option;
        cin>>option;
        switch(option)
        {
            case 1:
            {
                cout<<"Enter Task Description:"<<endl;
                cin.ignore();
                string description;
                getline(cin,description);
                addTask(description);
                break;
            }
            case 2:
            {
                viewTask();
                break;
            }
            case 3:
            {
                cout<<"Enter Task number to mark as completed:";
                int taskNumber;
                cin>>taskNumber;
                markTaskCompleted(taskNumber);
                break;
            }
            case 4:
            {
                cout<<"Enter Task number to remove:";
                int taskNumber;
                cin>>taskNumber;
                removeTask(taskNumber);
                break;
            }
            case 5:
                return 0;
            default:
                cout<<"Invalid option";
        }
    }
}
OUTPUT
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
1
Enter Task Description:
paint
Task paint added
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
1
Enter Task Description:
write
Task write added
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
2
1.paint-Pending
2.write-Pending
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
3
Enter Task number to mark as completed:1
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
4
Enter Task number to remove:2
Task write removed
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
2
1.paint-Completed
Options
1.Add Task
2.View Task
3.Mark Task as Completed
4.Remove Task
5.Exit
Choose an option:
5


=== Code Execution Successful ===
